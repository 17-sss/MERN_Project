@@ 200902    
    1. CSS position에 대해..
        링크: https://www.zerocho.com/category/CSS/post/5864f3b59f1dc000182d3ea1
    2. CSS로 Dropdown
        1) 링크
            http://tcpschool.com/css/css_advanced_dropdown
        +) StyledComponents 사용법 링크 (공식)
            https://styled-components.com/



@@ 200903 
    1. CSS z-index에 대해
        링크: https://aboooks.tistory.com/83
    2. React 조건부 렌더링 
        링크: https://ko.reactjs.org/docs/conditional-rendering.html
        


@@ 200910    
    1. JavaScript 생성자, SET, GET, 객체 관련
        링크:
            1) 생성자 & 프로토타입 
                https://www.zerocho.com/category/JavaScript/post/573c2acf91575c17008ad2fc       
                https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/constructor
                
                - 객체지향 프로그래밍 (class)
                    https://heecheolman.tistory.com/29
                - 객체(object)에 대해
                    https://www.zerocho.com/category/JavaScript/post/573dbc9370ba9c603052cc9a
                - 객체, 생성자
                    https://velog.io/@imacoolgirlyo/JS-Object-Constructors



@@ 200911
    1. React Route
        링크:
            https://gongbu-ing.tistory.com/45
            https://ing-yeo.net/2019/09/react-beginner-5/
            https://m.blog.naver.com/bkcaller/221494156108            
        참고:
            - React 자체에서 loction, match를 보내주는거였음. query-string 미들웨어가 아니라..
        


@@ 200912
    1. 자바스크립트 명명 규칙: https://velog.io/@recordboy/자바스크립트-변수-명명-규칙    
                    


@@ 200916     
    1. React 프레젠테이셔널 컴포넌트 & 컨테이너 컴포넌트 (리액트 개정판 책 참고)
        1) 프레젠테이셔널 컴포넌트: 주로 상태 관리가 이루어지지 않고, 그저 props를 받아와서 화면에 UI를 보여주기만 하는 컴포넌트.
        2) 컨터이너 컴포넌트: 리덕스와 연동되어 있는 컴포넌트, 리덕스로 부터 상태를 받아 오기도하고 리덕스 스토어에 액션을 디스패치.



@@ 200917
    1. React-Redux 관련 링크 (로그인, 로그아웃) (망할 Immer는 어케 돌아가는걸까..) (1)
        https://loy124.tistory.com/249?category=784080
        https://loy124.tistory.com/250?category=784080                                                     
        https://loy124.tistory.com/251?category=784080                                
    
    ETC) express mongodb 활용 (로그인, 로그아웃) (위 링크 전에 작업해야할 백앤드 부분인데.. 참고)
        https://loy124.tistory.com/243?category=791817
                            ~
        https://loy124.tistory.com/248?category=791817

    2. react-redux :: useSelector, useDispatch 관련
        https://medium.com/@pks2974/redux-hook-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-3b92b4d75466



@@ 200918
    1. React-Redux 관련 링크 (로그인, 로그아웃) (망할 Immer는 어케 돌아가는걸까..) (2)
        https://backend-intro.vlpt.us/5/07.html

    2. React - Express 연결 관련 링크 모음 :: 1
        https://hello-bryan.tistory.com/121
        https://im-developer.tistory.com/164
        https://darrengwon.tistory.com/239
        https://gongbu-ing.tistory.com/40
        https://hello-bryan.tistory.com/121
        https://electricburglar.tistory.com/114



@@ 200920
    1. React - Express 연결 관련 링크 모음 :: 2
        https://singa-korean.tistory.com/46
        (+ https://www.npmjs.com/package/http-proxy-middleware)
        https://ljh86029926.gitbook.io/coding-apple-react/undefined-1/cra
    
    2. package.json > scripts 커멘드 관련
        1. 전부 실행하고 싶을떄.. 예시.
            "start": "npm-run-all --parallel start:**",
            "start:server": "nodemon server.js",
            "start:client": "react-scripts start"
    ## backend
    3. sequelize
        1. 시퀄라이즈 공식 문서
            https://sequelize.org/master/index.html
        2. 모델 정의
            https://victorydntmd.tistory.com/27     (각종 속성 등 설명 기재되어 있음 ★)
    
    4. babel 적용
        https://shlee0882.tistory.com/231



@@ 200921   (backend)
    1. VScode Sequelize Autocomplete 설정
        https://devhyun.com/blog/post/24

    

@@ 200922       
    1. express, react 연동 관련
         https://solve-programming.tistory.com/m/27      (passport 관련도 있음)



@@ 200923
    ? 추후정적파일은 어디서 처리해야..? (참고용)
        https://jeonghwan-kim.github.io/2018/08/19/express-travis-beanstalk.html
    2. express react 연동 관련
        https://velopert.com/1921   (이 포스팅 이후 글도 참고하기.)



@@ 200924   (backend)
    * passport
        1. passport.authenticate            
            1) 공식문서 링크
                http://www.passportjs.org/docs/authenticate/
            ?) passport.authenticate가 무한루프 돌아서 찾아봄, 이럴때 차라리 공식문서좀 보자..



@@ 200925   (frontend)
    1. Axios & Fetch
        - axios보다 fetch를 먼저 알고 있어야 함. 더 조사해보기
        - 참고 링크
            https://darrengwon.tistory.com/22?category=858368
            https://velog.io/@leeeeunz/TIL-35.-axios%EC%99%80-fetch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90



@@ 200927   (frontend)  
    * 현 프로젝트 관련 메모
        1. loadUser 함수     (src/index.js)
            1. 현재 회원가입 및 로그인할 시, 각 container에서 localStorage에 저장하도록 해놓음.
                페이지를 새로고침했을 때도 로그인 상태를 유지하려면, 리액트 앱이 브라우저에서
                맨 처음 렌더링될 때 localStorage에서 값을 불러와 리덕스 스토어 안에 넣도록 구현해야 함.            
                
                1) 이 작업은 App 컴포넌트에서 useEffect를 사용하여 처리하거나, 
                    App 컴포넌트를 클래스형 컴포넌트로 전환 후 componentDidMount 메서드를 만들고 그 안에서 처리해도 됨.
            
            [!!] 이 프로젝트에서는 프로젝트의 엔트리 파일인 index.js에서 처리
                    --> componentDidMount & useEffect 메서드는 컴포넌트가 한 번 렌더링된 이후에 실행되기에, 
                    이 경우에는 사용자가 아주 짧은 깜박임 현상(로그인이 나타났다가 로그아웃이 나타나는 현상)을 겪을수도.

            + 무조건 sageMiddleware.run(rootSaga) 뒤에 호출



@@ 200929   (backend)  
    1. sequelize를 사용하여 '객체를 포함하고 있는 배열' 컬럼 생성
        1) 메모
            - mysql을 사용한 sequelize는 ARRAY 속성 사용 불가.
            - getters setters를 사용함으로 해결.
            - 추가적으로, JSON.stringify를 이용하여 저장하여야함.
            - 파일 참고
                /backend_novshop/models/category.js 의 items 컬럼
        2) 링크
            + 기준 링크 (해결하는데 도움이 된 링크)
                https://medium.com/codespace69/how-to-define-array-of-objects-in-sequelize-js-fb1529c5502e
            + 추가 참고용 링크
                https://sequelize.org/master/manual/getters-setters-virtuals.html
                https://sequelize.org/v3/docs/models-usage/     (ver 3)

    2. JSON.stringify 설명
        1) 메모
            - JSON.stringify: JavaScript 값을 JSON(JavaScript Object Motion) 문자열로 변환
        2) 링크
            https://www.w3schools.com/js/js_json_stringify.asp



@@ 200929   (all)  
    * 현 프로젝트 관련 메모 (★ 중요)
        1-1. 백단에서 보내는 res.json(데이터)는 어떻게 뷰단에 출력되는가에 대한 흐름 메모.
            1) 뷰에서 dispatch로 액션 생성 함수 실행 
            2) 방금 실행한 액션의 사가 함수가 실행됨
                - 사가의 call 함수 사용하여 서버의 응답(데이터)를 받아옴
            3) 받아온 데이터를 해당 액션의 핸들러(리듀서)로 보냄. (리덕스에 등록됨.)
            4) 뷰에서 useSelector로 가져온 변수에 데이터가 가져와짐.
        1-2. 다른 형식으로 메모 해봄.
            1) Container.js → dispatch(액션생성함수)
            2) (액션생성함수) 사가 함수 실행
                - call로 서버의 응답을 받아옴
            3) 리덕스 모듈의 핸들러로 데이터가 들어옴.
            4) useSelector(설정한 함수에 데이터가 들어옴) → Container.js
        
        + 결론 
            지금 구조에선 뷰에 원하는 형식의 데이터 가져오려면 서버에서 설정하는게 맞음.
            햇갈려서 메모함.

