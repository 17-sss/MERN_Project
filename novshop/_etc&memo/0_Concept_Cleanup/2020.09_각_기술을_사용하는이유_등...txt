@@ 200924

######### Node.js, express, React ######### 

* Node.js
    0. 참고한 링크
        https://jeong-pro.tistory.com/57
    1. 요약
        - Node.js는 자바스크립트를 브라우저외에서도 실행하는데 사용되는 자바스크립트 플랫폼
        - 자바스크립트 문법을 가지고 '서버'를 만들 수 있음.
        - 백엔드 <-> 프론트엔드가 가능하게됨.


* express
    0. 참고한 링크
        https://jeong-pro.tistory.com/57
    1. 요약
        - Express는 Node.js의 웹 서버 기능 위에 올라가는 상대적으로 작은 프레임워크.
            Node.js의 API를 단순화하고 유용한 새로운 기능을 추가 (jQuery와 역할이 비슷하다고 생각하면 됨)
            Express는 미니멀 철학을 가진다. 프레임워크에서는 최소한의 것들만 지원하고 나머지 필요한 것은 라이브러리를 찾아야.


* React
    0. 참고한 링크
        https://velog.io/@youthfulhps/React-React를-사용하는-이유
    1. 요약
        - 프론트앤드 라이브러리가 등장하게 된 이유는 동적인 웹 페이지를 보다 효율적으로 유지 보수하고 관리할 수 있도록 하기 위함.
        - 프론트앤드 라이브러리 / 프레임워크는 DOM 관리와 상태 변화 관리를 최소화하고, 
            개발자는 오직 기능 개발, 사용자 인터페이스에 보다 더 집중할 수 있도록 도와주는 것이며 
            이러한 목적을 가지고 다양한 해결 방식, 추구 방향을 가지고 
            각각의 프론트앤트 라이브러리 / 프레임워크가 탄생하게 됨.    
        - 유지 보수에 보다 집중되어 있지만, 충분히 빠른 프론트앤드 라이브러리(? 라이브러리인가?)            
    2. React는 라이브러리? 프레임워크?
        - React는 라이브러리와 프레임워크의 특성을 모두 가지고있는 혼종임..



######### 기타 개념 정리 ######### 
    
* 라이브러리 프레임워크 차이점 
    0. 참고한 링크
        https://www.youtube.com/watch?v=t9ccIykXTCM&vl=ko          
    1. 요약          
        1) 공통
            - 라이브러리, 프레임워크 모두 남이 쓴 코드.
            - 코딩을 더 윤택하게 하기 위해 가져다쓰는 것      
        2) 라이브러리
            - 라이브러리는 대표적으로 jQuery.
            - 내가 필요할 때 가져다쓰는 것.
            - 없다고 망하거나 그러지 않음.
        3) 프레임워크  
            - 프레임워크는 내가 부르는 것이 아님. 프레임워크가 나를 부르는 것.
            - 내가 컨트롤하는 건 없음. 그저 규칙을 따라가는 것임.
        F) 최종요약
            - 라이브러리: 내가 필요로 할 때 도서관에서 자료 찾듯이 마음대로 빌려 쓰는 것
            - 프레임워크: (정해진) 프레임 내에서 작업을 해야 하는 것
            -- 하지만 그 둘의 경계가 항상 뚜렷한 것은 아님